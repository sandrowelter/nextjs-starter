
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `padroes_subgrupos` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model padroes_subgrupos
 * 
 */
export type padroes_subgruposModel = runtime.Types.Result.DefaultSelection<Prisma.$padroes_subgruposPayload>

export type AggregatePadroes_subgrupos = {
  _count: Padroes_subgruposCountAggregateOutputType | null
  _min: Padroes_subgruposMinAggregateOutputType | null
  _max: Padroes_subgruposMaxAggregateOutputType | null
}

export type Padroes_subgruposMinAggregateOutputType = {
  id: string | null
  subgrupo: string | null
  grupoId: string | null
}

export type Padroes_subgruposMaxAggregateOutputType = {
  id: string | null
  subgrupo: string | null
  grupoId: string | null
}

export type Padroes_subgruposCountAggregateOutputType = {
  id: number
  subgrupo: number
  grupoId: number
  _all: number
}


export type Padroes_subgruposMinAggregateInputType = {
  id?: true
  subgrupo?: true
  grupoId?: true
}

export type Padroes_subgruposMaxAggregateInputType = {
  id?: true
  subgrupo?: true
  grupoId?: true
}

export type Padroes_subgruposCountAggregateInputType = {
  id?: true
  subgrupo?: true
  grupoId?: true
  _all?: true
}

export type Padroes_subgruposAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which padroes_subgrupos to aggregate.
   */
  where?: Prisma.padroes_subgruposWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of padroes_subgrupos to fetch.
   */
  orderBy?: Prisma.padroes_subgruposOrderByWithRelationInput | Prisma.padroes_subgruposOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.padroes_subgruposWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` padroes_subgrupos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` padroes_subgrupos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned padroes_subgrupos
  **/
  _count?: true | Padroes_subgruposCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Padroes_subgruposMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Padroes_subgruposMaxAggregateInputType
}

export type GetPadroes_subgruposAggregateType<T extends Padroes_subgruposAggregateArgs> = {
      [P in keyof T & keyof AggregatePadroes_subgrupos]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePadroes_subgrupos[P]>
    : Prisma.GetScalarType<T[P], AggregatePadroes_subgrupos[P]>
}




export type padroes_subgruposGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.padroes_subgruposWhereInput
  orderBy?: Prisma.padroes_subgruposOrderByWithAggregationInput | Prisma.padroes_subgruposOrderByWithAggregationInput[]
  by: Prisma.Padroes_subgruposScalarFieldEnum[] | Prisma.Padroes_subgruposScalarFieldEnum
  having?: Prisma.padroes_subgruposScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Padroes_subgruposCountAggregateInputType | true
  _min?: Padroes_subgruposMinAggregateInputType
  _max?: Padroes_subgruposMaxAggregateInputType
}

export type Padroes_subgruposGroupByOutputType = {
  id: string
  subgrupo: string
  grupoId: string
  _count: Padroes_subgruposCountAggregateOutputType | null
  _min: Padroes_subgruposMinAggregateOutputType | null
  _max: Padroes_subgruposMaxAggregateOutputType | null
}

type GetPadroes_subgruposGroupByPayload<T extends padroes_subgruposGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Padroes_subgruposGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Padroes_subgruposGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Padroes_subgruposGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Padroes_subgruposGroupByOutputType[P]>
      }
    >
  > 



export type padroes_subgruposWhereInput = {
  AND?: Prisma.padroes_subgruposWhereInput | Prisma.padroes_subgruposWhereInput[]
  OR?: Prisma.padroes_subgruposWhereInput[]
  NOT?: Prisma.padroes_subgruposWhereInput | Prisma.padroes_subgruposWhereInput[]
  id?: Prisma.StringFilter<"padroes_subgrupos"> | string
  subgrupo?: Prisma.StringFilter<"padroes_subgrupos"> | string
  grupoId?: Prisma.StringFilter<"padroes_subgrupos"> | string
  grupo?: Prisma.XOR<Prisma.Padroes_gruposScalarRelationFilter, Prisma.padroes_gruposWhereInput>
  modelos?: Prisma.Padroes_modelosListRelationFilter
}

export type padroes_subgruposOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  subgrupo?: Prisma.SortOrder
  grupoId?: Prisma.SortOrder
  grupo?: Prisma.padroes_gruposOrderByWithRelationInput
  modelos?: Prisma.padroes_modelosOrderByRelationAggregateInput
}

export type padroes_subgruposWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.padroes_subgruposWhereInput | Prisma.padroes_subgruposWhereInput[]
  OR?: Prisma.padroes_subgruposWhereInput[]
  NOT?: Prisma.padroes_subgruposWhereInput | Prisma.padroes_subgruposWhereInput[]
  subgrupo?: Prisma.StringFilter<"padroes_subgrupos"> | string
  grupoId?: Prisma.StringFilter<"padroes_subgrupos"> | string
  grupo?: Prisma.XOR<Prisma.Padroes_gruposScalarRelationFilter, Prisma.padroes_gruposWhereInput>
  modelos?: Prisma.Padroes_modelosListRelationFilter
}, "id">

export type padroes_subgruposOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  subgrupo?: Prisma.SortOrder
  grupoId?: Prisma.SortOrder
  _count?: Prisma.padroes_subgruposCountOrderByAggregateInput
  _max?: Prisma.padroes_subgruposMaxOrderByAggregateInput
  _min?: Prisma.padroes_subgruposMinOrderByAggregateInput
}

export type padroes_subgruposScalarWhereWithAggregatesInput = {
  AND?: Prisma.padroes_subgruposScalarWhereWithAggregatesInput | Prisma.padroes_subgruposScalarWhereWithAggregatesInput[]
  OR?: Prisma.padroes_subgruposScalarWhereWithAggregatesInput[]
  NOT?: Prisma.padroes_subgruposScalarWhereWithAggregatesInput | Prisma.padroes_subgruposScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"padroes_subgrupos"> | string
  subgrupo?: Prisma.StringWithAggregatesFilter<"padroes_subgrupos"> | string
  grupoId?: Prisma.StringWithAggregatesFilter<"padroes_subgrupos"> | string
}

export type padroes_subgruposCreateInput = {
  id: string
  subgrupo: string
  grupo: Prisma.padroes_gruposCreateNestedOneWithoutSubgruposInput
  modelos?: Prisma.padroes_modelosCreateNestedManyWithoutSubgrupoInput
}

export type padroes_subgruposUncheckedCreateInput = {
  id: string
  subgrupo: string
  grupoId: string
  modelos?: Prisma.padroes_modelosUncheckedCreateNestedManyWithoutSubgrupoInput
}

export type padroes_subgruposUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subgrupo?: Prisma.StringFieldUpdateOperationsInput | string
  grupo?: Prisma.padroes_gruposUpdateOneRequiredWithoutSubgruposNestedInput
  modelos?: Prisma.padroes_modelosUpdateManyWithoutSubgrupoNestedInput
}

export type padroes_subgruposUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subgrupo?: Prisma.StringFieldUpdateOperationsInput | string
  grupoId?: Prisma.StringFieldUpdateOperationsInput | string
  modelos?: Prisma.padroes_modelosUncheckedUpdateManyWithoutSubgrupoNestedInput
}

export type padroes_subgruposCreateManyInput = {
  id: string
  subgrupo: string
  grupoId: string
}

export type padroes_subgruposUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subgrupo?: Prisma.StringFieldUpdateOperationsInput | string
}

export type padroes_subgruposUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subgrupo?: Prisma.StringFieldUpdateOperationsInput | string
  grupoId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type Padroes_subgruposListRelationFilter = {
  every?: Prisma.padroes_subgruposWhereInput
  some?: Prisma.padroes_subgruposWhereInput
  none?: Prisma.padroes_subgruposWhereInput
}

export type padroes_subgruposOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type padroes_subgruposCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  subgrupo?: Prisma.SortOrder
  grupoId?: Prisma.SortOrder
}

export type padroes_subgruposMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  subgrupo?: Prisma.SortOrder
  grupoId?: Prisma.SortOrder
}

export type padroes_subgruposMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  subgrupo?: Prisma.SortOrder
  grupoId?: Prisma.SortOrder
}

export type Padroes_subgruposScalarRelationFilter = {
  is?: Prisma.padroes_subgruposWhereInput
  isNot?: Prisma.padroes_subgruposWhereInput
}

export type padroes_subgruposCreateNestedManyWithoutGrupoInput = {
  create?: Prisma.XOR<Prisma.padroes_subgruposCreateWithoutGrupoInput, Prisma.padroes_subgruposUncheckedCreateWithoutGrupoInput> | Prisma.padroes_subgruposCreateWithoutGrupoInput[] | Prisma.padroes_subgruposUncheckedCreateWithoutGrupoInput[]
  connectOrCreate?: Prisma.padroes_subgruposCreateOrConnectWithoutGrupoInput | Prisma.padroes_subgruposCreateOrConnectWithoutGrupoInput[]
  createMany?: Prisma.padroes_subgruposCreateManyGrupoInputEnvelope
  connect?: Prisma.padroes_subgruposWhereUniqueInput | Prisma.padroes_subgruposWhereUniqueInput[]
}

export type padroes_subgruposUncheckedCreateNestedManyWithoutGrupoInput = {
  create?: Prisma.XOR<Prisma.padroes_subgruposCreateWithoutGrupoInput, Prisma.padroes_subgruposUncheckedCreateWithoutGrupoInput> | Prisma.padroes_subgruposCreateWithoutGrupoInput[] | Prisma.padroes_subgruposUncheckedCreateWithoutGrupoInput[]
  connectOrCreate?: Prisma.padroes_subgruposCreateOrConnectWithoutGrupoInput | Prisma.padroes_subgruposCreateOrConnectWithoutGrupoInput[]
  createMany?: Prisma.padroes_subgruposCreateManyGrupoInputEnvelope
  connect?: Prisma.padroes_subgruposWhereUniqueInput | Prisma.padroes_subgruposWhereUniqueInput[]
}

export type padroes_subgruposUpdateManyWithoutGrupoNestedInput = {
  create?: Prisma.XOR<Prisma.padroes_subgruposCreateWithoutGrupoInput, Prisma.padroes_subgruposUncheckedCreateWithoutGrupoInput> | Prisma.padroes_subgruposCreateWithoutGrupoInput[] | Prisma.padroes_subgruposUncheckedCreateWithoutGrupoInput[]
  connectOrCreate?: Prisma.padroes_subgruposCreateOrConnectWithoutGrupoInput | Prisma.padroes_subgruposCreateOrConnectWithoutGrupoInput[]
  upsert?: Prisma.padroes_subgruposUpsertWithWhereUniqueWithoutGrupoInput | Prisma.padroes_subgruposUpsertWithWhereUniqueWithoutGrupoInput[]
  createMany?: Prisma.padroes_subgruposCreateManyGrupoInputEnvelope
  set?: Prisma.padroes_subgruposWhereUniqueInput | Prisma.padroes_subgruposWhereUniqueInput[]
  disconnect?: Prisma.padroes_subgruposWhereUniqueInput | Prisma.padroes_subgruposWhereUniqueInput[]
  delete?: Prisma.padroes_subgruposWhereUniqueInput | Prisma.padroes_subgruposWhereUniqueInput[]
  connect?: Prisma.padroes_subgruposWhereUniqueInput | Prisma.padroes_subgruposWhereUniqueInput[]
  update?: Prisma.padroes_subgruposUpdateWithWhereUniqueWithoutGrupoInput | Prisma.padroes_subgruposUpdateWithWhereUniqueWithoutGrupoInput[]
  updateMany?: Prisma.padroes_subgruposUpdateManyWithWhereWithoutGrupoInput | Prisma.padroes_subgruposUpdateManyWithWhereWithoutGrupoInput[]
  deleteMany?: Prisma.padroes_subgruposScalarWhereInput | Prisma.padroes_subgruposScalarWhereInput[]
}

export type padroes_subgruposUncheckedUpdateManyWithoutGrupoNestedInput = {
  create?: Prisma.XOR<Prisma.padroes_subgruposCreateWithoutGrupoInput, Prisma.padroes_subgruposUncheckedCreateWithoutGrupoInput> | Prisma.padroes_subgruposCreateWithoutGrupoInput[] | Prisma.padroes_subgruposUncheckedCreateWithoutGrupoInput[]
  connectOrCreate?: Prisma.padroes_subgruposCreateOrConnectWithoutGrupoInput | Prisma.padroes_subgruposCreateOrConnectWithoutGrupoInput[]
  upsert?: Prisma.padroes_subgruposUpsertWithWhereUniqueWithoutGrupoInput | Prisma.padroes_subgruposUpsertWithWhereUniqueWithoutGrupoInput[]
  createMany?: Prisma.padroes_subgruposCreateManyGrupoInputEnvelope
  set?: Prisma.padroes_subgruposWhereUniqueInput | Prisma.padroes_subgruposWhereUniqueInput[]
  disconnect?: Prisma.padroes_subgruposWhereUniqueInput | Prisma.padroes_subgruposWhereUniqueInput[]
  delete?: Prisma.padroes_subgruposWhereUniqueInput | Prisma.padroes_subgruposWhereUniqueInput[]
  connect?: Prisma.padroes_subgruposWhereUniqueInput | Prisma.padroes_subgruposWhereUniqueInput[]
  update?: Prisma.padroes_subgruposUpdateWithWhereUniqueWithoutGrupoInput | Prisma.padroes_subgruposUpdateWithWhereUniqueWithoutGrupoInput[]
  updateMany?: Prisma.padroes_subgruposUpdateManyWithWhereWithoutGrupoInput | Prisma.padroes_subgruposUpdateManyWithWhereWithoutGrupoInput[]
  deleteMany?: Prisma.padroes_subgruposScalarWhereInput | Prisma.padroes_subgruposScalarWhereInput[]
}

export type padroes_subgruposCreateNestedOneWithoutModelosInput = {
  create?: Prisma.XOR<Prisma.padroes_subgruposCreateWithoutModelosInput, Prisma.padroes_subgruposUncheckedCreateWithoutModelosInput>
  connectOrCreate?: Prisma.padroes_subgruposCreateOrConnectWithoutModelosInput
  connect?: Prisma.padroes_subgruposWhereUniqueInput
}

export type padroes_subgruposUpdateOneRequiredWithoutModelosNestedInput = {
  create?: Prisma.XOR<Prisma.padroes_subgruposCreateWithoutModelosInput, Prisma.padroes_subgruposUncheckedCreateWithoutModelosInput>
  connectOrCreate?: Prisma.padroes_subgruposCreateOrConnectWithoutModelosInput
  upsert?: Prisma.padroes_subgruposUpsertWithoutModelosInput
  connect?: Prisma.padroes_subgruposWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.padroes_subgruposUpdateToOneWithWhereWithoutModelosInput, Prisma.padroes_subgruposUpdateWithoutModelosInput>, Prisma.padroes_subgruposUncheckedUpdateWithoutModelosInput>
}

export type padroes_subgruposCreateWithoutGrupoInput = {
  id: string
  subgrupo: string
  modelos?: Prisma.padroes_modelosCreateNestedManyWithoutSubgrupoInput
}

export type padroes_subgruposUncheckedCreateWithoutGrupoInput = {
  id: string
  subgrupo: string
  modelos?: Prisma.padroes_modelosUncheckedCreateNestedManyWithoutSubgrupoInput
}

export type padroes_subgruposCreateOrConnectWithoutGrupoInput = {
  where: Prisma.padroes_subgruposWhereUniqueInput
  create: Prisma.XOR<Prisma.padroes_subgruposCreateWithoutGrupoInput, Prisma.padroes_subgruposUncheckedCreateWithoutGrupoInput>
}

export type padroes_subgruposCreateManyGrupoInputEnvelope = {
  data: Prisma.padroes_subgruposCreateManyGrupoInput | Prisma.padroes_subgruposCreateManyGrupoInput[]
  skipDuplicates?: boolean
}

export type padroes_subgruposUpsertWithWhereUniqueWithoutGrupoInput = {
  where: Prisma.padroes_subgruposWhereUniqueInput
  update: Prisma.XOR<Prisma.padroes_subgruposUpdateWithoutGrupoInput, Prisma.padroes_subgruposUncheckedUpdateWithoutGrupoInput>
  create: Prisma.XOR<Prisma.padroes_subgruposCreateWithoutGrupoInput, Prisma.padroes_subgruposUncheckedCreateWithoutGrupoInput>
}

export type padroes_subgruposUpdateWithWhereUniqueWithoutGrupoInput = {
  where: Prisma.padroes_subgruposWhereUniqueInput
  data: Prisma.XOR<Prisma.padroes_subgruposUpdateWithoutGrupoInput, Prisma.padroes_subgruposUncheckedUpdateWithoutGrupoInput>
}

export type padroes_subgruposUpdateManyWithWhereWithoutGrupoInput = {
  where: Prisma.padroes_subgruposScalarWhereInput
  data: Prisma.XOR<Prisma.padroes_subgruposUpdateManyMutationInput, Prisma.padroes_subgruposUncheckedUpdateManyWithoutGrupoInput>
}

export type padroes_subgruposScalarWhereInput = {
  AND?: Prisma.padroes_subgruposScalarWhereInput | Prisma.padroes_subgruposScalarWhereInput[]
  OR?: Prisma.padroes_subgruposScalarWhereInput[]
  NOT?: Prisma.padroes_subgruposScalarWhereInput | Prisma.padroes_subgruposScalarWhereInput[]
  id?: Prisma.StringFilter<"padroes_subgrupos"> | string
  subgrupo?: Prisma.StringFilter<"padroes_subgrupos"> | string
  grupoId?: Prisma.StringFilter<"padroes_subgrupos"> | string
}

export type padroes_subgruposCreateWithoutModelosInput = {
  id: string
  subgrupo: string
  grupo: Prisma.padroes_gruposCreateNestedOneWithoutSubgruposInput
}

export type padroes_subgruposUncheckedCreateWithoutModelosInput = {
  id: string
  subgrupo: string
  grupoId: string
}

export type padroes_subgruposCreateOrConnectWithoutModelosInput = {
  where: Prisma.padroes_subgruposWhereUniqueInput
  create: Prisma.XOR<Prisma.padroes_subgruposCreateWithoutModelosInput, Prisma.padroes_subgruposUncheckedCreateWithoutModelosInput>
}

export type padroes_subgruposUpsertWithoutModelosInput = {
  update: Prisma.XOR<Prisma.padroes_subgruposUpdateWithoutModelosInput, Prisma.padroes_subgruposUncheckedUpdateWithoutModelosInput>
  create: Prisma.XOR<Prisma.padroes_subgruposCreateWithoutModelosInput, Prisma.padroes_subgruposUncheckedCreateWithoutModelosInput>
  where?: Prisma.padroes_subgruposWhereInput
}

export type padroes_subgruposUpdateToOneWithWhereWithoutModelosInput = {
  where?: Prisma.padroes_subgruposWhereInput
  data: Prisma.XOR<Prisma.padroes_subgruposUpdateWithoutModelosInput, Prisma.padroes_subgruposUncheckedUpdateWithoutModelosInput>
}

export type padroes_subgruposUpdateWithoutModelosInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subgrupo?: Prisma.StringFieldUpdateOperationsInput | string
  grupo?: Prisma.padroes_gruposUpdateOneRequiredWithoutSubgruposNestedInput
}

export type padroes_subgruposUncheckedUpdateWithoutModelosInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subgrupo?: Prisma.StringFieldUpdateOperationsInput | string
  grupoId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type padroes_subgruposCreateManyGrupoInput = {
  id: string
  subgrupo: string
}

export type padroes_subgruposUpdateWithoutGrupoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subgrupo?: Prisma.StringFieldUpdateOperationsInput | string
  modelos?: Prisma.padroes_modelosUpdateManyWithoutSubgrupoNestedInput
}

export type padroes_subgruposUncheckedUpdateWithoutGrupoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subgrupo?: Prisma.StringFieldUpdateOperationsInput | string
  modelos?: Prisma.padroes_modelosUncheckedUpdateManyWithoutSubgrupoNestedInput
}

export type padroes_subgruposUncheckedUpdateManyWithoutGrupoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subgrupo?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type Padroes_subgruposCountOutputType
 */

export type Padroes_subgruposCountOutputType = {
  modelos: number
}

export type Padroes_subgruposCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modelos?: boolean | Padroes_subgruposCountOutputTypeCountModelosArgs
}

/**
 * Padroes_subgruposCountOutputType without action
 */
export type Padroes_subgruposCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Padroes_subgruposCountOutputType
   */
  select?: Prisma.Padroes_subgruposCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Padroes_subgruposCountOutputType without action
 */
export type Padroes_subgruposCountOutputTypeCountModelosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.padroes_modelosWhereInput
}


export type padroes_subgruposSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  subgrupo?: boolean
  grupoId?: boolean
  grupo?: boolean | Prisma.padroes_gruposDefaultArgs<ExtArgs>
  modelos?: boolean | Prisma.padroes_subgrupos$modelosArgs<ExtArgs>
  _count?: boolean | Prisma.Padroes_subgruposCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["padroes_subgrupos"]>

export type padroes_subgruposSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  subgrupo?: boolean
  grupoId?: boolean
  grupo?: boolean | Prisma.padroes_gruposDefaultArgs<ExtArgs>
}, ExtArgs["result"]["padroes_subgrupos"]>

export type padroes_subgruposSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  subgrupo?: boolean
  grupoId?: boolean
  grupo?: boolean | Prisma.padroes_gruposDefaultArgs<ExtArgs>
}, ExtArgs["result"]["padroes_subgrupos"]>

export type padroes_subgruposSelectScalar = {
  id?: boolean
  subgrupo?: boolean
  grupoId?: boolean
}

export type padroes_subgruposOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "subgrupo" | "grupoId", ExtArgs["result"]["padroes_subgrupos"]>
export type padroes_subgruposInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  grupo?: boolean | Prisma.padroes_gruposDefaultArgs<ExtArgs>
  modelos?: boolean | Prisma.padroes_subgrupos$modelosArgs<ExtArgs>
  _count?: boolean | Prisma.Padroes_subgruposCountOutputTypeDefaultArgs<ExtArgs>
}
export type padroes_subgruposIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  grupo?: boolean | Prisma.padroes_gruposDefaultArgs<ExtArgs>
}
export type padroes_subgruposIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  grupo?: boolean | Prisma.padroes_gruposDefaultArgs<ExtArgs>
}

export type $padroes_subgruposPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "padroes_subgrupos"
  objects: {
    grupo: Prisma.$padroes_gruposPayload<ExtArgs>
    modelos: Prisma.$padroes_modelosPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    subgrupo: string
    grupoId: string
  }, ExtArgs["result"]["padroes_subgrupos"]>
  composites: {}
}

export type padroes_subgruposGetPayload<S extends boolean | null | undefined | padroes_subgruposDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload, S>

export type padroes_subgruposCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<padroes_subgruposFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Padroes_subgruposCountAggregateInputType | true
  }

export interface padroes_subgruposDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['padroes_subgrupos'], meta: { name: 'padroes_subgrupos' } }
  /**
   * Find zero or one Padroes_subgrupos that matches the filter.
   * @param {padroes_subgruposFindUniqueArgs} args - Arguments to find a Padroes_subgrupos
   * @example
   * // Get one Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends padroes_subgruposFindUniqueArgs>(args: Prisma.SelectSubset<T, padroes_subgruposFindUniqueArgs<ExtArgs>>): Prisma.Prisma__padroes_subgruposClient<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Padroes_subgrupos that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {padroes_subgruposFindUniqueOrThrowArgs} args - Arguments to find a Padroes_subgrupos
   * @example
   * // Get one Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends padroes_subgruposFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, padroes_subgruposFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__padroes_subgruposClient<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Padroes_subgrupos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {padroes_subgruposFindFirstArgs} args - Arguments to find a Padroes_subgrupos
   * @example
   * // Get one Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends padroes_subgruposFindFirstArgs>(args?: Prisma.SelectSubset<T, padroes_subgruposFindFirstArgs<ExtArgs>>): Prisma.Prisma__padroes_subgruposClient<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Padroes_subgrupos that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {padroes_subgruposFindFirstOrThrowArgs} args - Arguments to find a Padroes_subgrupos
   * @example
   * // Get one Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends padroes_subgruposFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, padroes_subgruposFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__padroes_subgruposClient<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Padroes_subgrupos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {padroes_subgruposFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.findMany()
   * 
   * // Get first 10 Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const padroes_subgruposWithIdOnly = await prisma.padroes_subgrupos.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends padroes_subgruposFindManyArgs>(args?: Prisma.SelectSubset<T, padroes_subgruposFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Padroes_subgrupos.
   * @param {padroes_subgruposCreateArgs} args - Arguments to create a Padroes_subgrupos.
   * @example
   * // Create one Padroes_subgrupos
   * const Padroes_subgrupos = await prisma.padroes_subgrupos.create({
   *   data: {
   *     // ... data to create a Padroes_subgrupos
   *   }
   * })
   * 
   */
  create<T extends padroes_subgruposCreateArgs>(args: Prisma.SelectSubset<T, padroes_subgruposCreateArgs<ExtArgs>>): Prisma.Prisma__padroes_subgruposClient<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Padroes_subgrupos.
   * @param {padroes_subgruposCreateManyArgs} args - Arguments to create many Padroes_subgrupos.
   * @example
   * // Create many Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends padroes_subgruposCreateManyArgs>(args?: Prisma.SelectSubset<T, padroes_subgruposCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Padroes_subgrupos and returns the data saved in the database.
   * @param {padroes_subgruposCreateManyAndReturnArgs} args - Arguments to create many Padroes_subgrupos.
   * @example
   * // Create many Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Padroes_subgrupos and only return the `id`
   * const padroes_subgruposWithIdOnly = await prisma.padroes_subgrupos.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends padroes_subgruposCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, padroes_subgruposCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Padroes_subgrupos.
   * @param {padroes_subgruposDeleteArgs} args - Arguments to delete one Padroes_subgrupos.
   * @example
   * // Delete one Padroes_subgrupos
   * const Padroes_subgrupos = await prisma.padroes_subgrupos.delete({
   *   where: {
   *     // ... filter to delete one Padroes_subgrupos
   *   }
   * })
   * 
   */
  delete<T extends padroes_subgruposDeleteArgs>(args: Prisma.SelectSubset<T, padroes_subgruposDeleteArgs<ExtArgs>>): Prisma.Prisma__padroes_subgruposClient<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Padroes_subgrupos.
   * @param {padroes_subgruposUpdateArgs} args - Arguments to update one Padroes_subgrupos.
   * @example
   * // Update one Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends padroes_subgruposUpdateArgs>(args: Prisma.SelectSubset<T, padroes_subgruposUpdateArgs<ExtArgs>>): Prisma.Prisma__padroes_subgruposClient<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Padroes_subgrupos.
   * @param {padroes_subgruposDeleteManyArgs} args - Arguments to filter Padroes_subgrupos to delete.
   * @example
   * // Delete a few Padroes_subgrupos
   * const { count } = await prisma.padroes_subgrupos.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends padroes_subgruposDeleteManyArgs>(args?: Prisma.SelectSubset<T, padroes_subgruposDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Padroes_subgrupos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {padroes_subgruposUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends padroes_subgruposUpdateManyArgs>(args: Prisma.SelectSubset<T, padroes_subgruposUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Padroes_subgrupos and returns the data updated in the database.
   * @param {padroes_subgruposUpdateManyAndReturnArgs} args - Arguments to update many Padroes_subgrupos.
   * @example
   * // Update many Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Padroes_subgrupos and only return the `id`
   * const padroes_subgruposWithIdOnly = await prisma.padroes_subgrupos.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends padroes_subgruposUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, padroes_subgruposUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Padroes_subgrupos.
   * @param {padroes_subgruposUpsertArgs} args - Arguments to update or create a Padroes_subgrupos.
   * @example
   * // Update or create a Padroes_subgrupos
   * const padroes_subgrupos = await prisma.padroes_subgrupos.upsert({
   *   create: {
   *     // ... data to create a Padroes_subgrupos
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Padroes_subgrupos we want to update
   *   }
   * })
   */
  upsert<T extends padroes_subgruposUpsertArgs>(args: Prisma.SelectSubset<T, padroes_subgruposUpsertArgs<ExtArgs>>): Prisma.Prisma__padroes_subgruposClient<runtime.Types.Result.GetResult<Prisma.$padroes_subgruposPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Padroes_subgrupos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {padroes_subgruposCountArgs} args - Arguments to filter Padroes_subgrupos to count.
   * @example
   * // Count the number of Padroes_subgrupos
   * const count = await prisma.padroes_subgrupos.count({
   *   where: {
   *     // ... the filter for the Padroes_subgrupos we want to count
   *   }
   * })
  **/
  count<T extends padroes_subgruposCountArgs>(
    args?: Prisma.Subset<T, padroes_subgruposCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Padroes_subgruposCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Padroes_subgrupos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Padroes_subgruposAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Padroes_subgruposAggregateArgs>(args: Prisma.Subset<T, Padroes_subgruposAggregateArgs>): Prisma.PrismaPromise<GetPadroes_subgruposAggregateType<T>>

  /**
   * Group by Padroes_subgrupos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {padroes_subgruposGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends padroes_subgruposGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: padroes_subgruposGroupByArgs['orderBy'] }
      : { orderBy?: padroes_subgruposGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, padroes_subgruposGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPadroes_subgruposGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the padroes_subgrupos model
 */
readonly fields: padroes_subgruposFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for padroes_subgrupos.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__padroes_subgruposClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  grupo<T extends Prisma.padroes_gruposDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.padroes_gruposDefaultArgs<ExtArgs>>): Prisma.Prisma__padroes_gruposClient<runtime.Types.Result.GetResult<Prisma.$padroes_gruposPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  modelos<T extends Prisma.padroes_subgrupos$modelosArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.padroes_subgrupos$modelosArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$padroes_modelosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the padroes_subgrupos model
 */
export interface padroes_subgruposFieldRefs {
  readonly id: Prisma.FieldRef<"padroes_subgrupos", 'String'>
  readonly subgrupo: Prisma.FieldRef<"padroes_subgrupos", 'String'>
  readonly grupoId: Prisma.FieldRef<"padroes_subgrupos", 'String'>
}
    

// Custom InputTypes
/**
 * padroes_subgrupos findUnique
 */
export type padroes_subgruposFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposInclude<ExtArgs> | null
  /**
   * Filter, which padroes_subgrupos to fetch.
   */
  where: Prisma.padroes_subgruposWhereUniqueInput
}

/**
 * padroes_subgrupos findUniqueOrThrow
 */
export type padroes_subgruposFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposInclude<ExtArgs> | null
  /**
   * Filter, which padroes_subgrupos to fetch.
   */
  where: Prisma.padroes_subgruposWhereUniqueInput
}

/**
 * padroes_subgrupos findFirst
 */
export type padroes_subgruposFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposInclude<ExtArgs> | null
  /**
   * Filter, which padroes_subgrupos to fetch.
   */
  where?: Prisma.padroes_subgruposWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of padroes_subgrupos to fetch.
   */
  orderBy?: Prisma.padroes_subgruposOrderByWithRelationInput | Prisma.padroes_subgruposOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for padroes_subgrupos.
   */
  cursor?: Prisma.padroes_subgruposWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` padroes_subgrupos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` padroes_subgrupos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of padroes_subgrupos.
   */
  distinct?: Prisma.Padroes_subgruposScalarFieldEnum | Prisma.Padroes_subgruposScalarFieldEnum[]
}

/**
 * padroes_subgrupos findFirstOrThrow
 */
export type padroes_subgruposFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposInclude<ExtArgs> | null
  /**
   * Filter, which padroes_subgrupos to fetch.
   */
  where?: Prisma.padroes_subgruposWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of padroes_subgrupos to fetch.
   */
  orderBy?: Prisma.padroes_subgruposOrderByWithRelationInput | Prisma.padroes_subgruposOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for padroes_subgrupos.
   */
  cursor?: Prisma.padroes_subgruposWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` padroes_subgrupos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` padroes_subgrupos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of padroes_subgrupos.
   */
  distinct?: Prisma.Padroes_subgruposScalarFieldEnum | Prisma.Padroes_subgruposScalarFieldEnum[]
}

/**
 * padroes_subgrupos findMany
 */
export type padroes_subgruposFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposInclude<ExtArgs> | null
  /**
   * Filter, which padroes_subgrupos to fetch.
   */
  where?: Prisma.padroes_subgruposWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of padroes_subgrupos to fetch.
   */
  orderBy?: Prisma.padroes_subgruposOrderByWithRelationInput | Prisma.padroes_subgruposOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing padroes_subgrupos.
   */
  cursor?: Prisma.padroes_subgruposWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` padroes_subgrupos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` padroes_subgrupos.
   */
  skip?: number
  distinct?: Prisma.Padroes_subgruposScalarFieldEnum | Prisma.Padroes_subgruposScalarFieldEnum[]
}

/**
 * padroes_subgrupos create
 */
export type padroes_subgruposCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposInclude<ExtArgs> | null
  /**
   * The data needed to create a padroes_subgrupos.
   */
  data: Prisma.XOR<Prisma.padroes_subgruposCreateInput, Prisma.padroes_subgruposUncheckedCreateInput>
}

/**
 * padroes_subgrupos createMany
 */
export type padroes_subgruposCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many padroes_subgrupos.
   */
  data: Prisma.padroes_subgruposCreateManyInput | Prisma.padroes_subgruposCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * padroes_subgrupos createManyAndReturn
 */
export type padroes_subgruposCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * The data used to create many padroes_subgrupos.
   */
  data: Prisma.padroes_subgruposCreateManyInput | Prisma.padroes_subgruposCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * padroes_subgrupos update
 */
export type padroes_subgruposUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposInclude<ExtArgs> | null
  /**
   * The data needed to update a padroes_subgrupos.
   */
  data: Prisma.XOR<Prisma.padroes_subgruposUpdateInput, Prisma.padroes_subgruposUncheckedUpdateInput>
  /**
   * Choose, which padroes_subgrupos to update.
   */
  where: Prisma.padroes_subgruposWhereUniqueInput
}

/**
 * padroes_subgrupos updateMany
 */
export type padroes_subgruposUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update padroes_subgrupos.
   */
  data: Prisma.XOR<Prisma.padroes_subgruposUpdateManyMutationInput, Prisma.padroes_subgruposUncheckedUpdateManyInput>
  /**
   * Filter which padroes_subgrupos to update
   */
  where?: Prisma.padroes_subgruposWhereInput
  /**
   * Limit how many padroes_subgrupos to update.
   */
  limit?: number
}

/**
 * padroes_subgrupos updateManyAndReturn
 */
export type padroes_subgruposUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * The data used to update padroes_subgrupos.
   */
  data: Prisma.XOR<Prisma.padroes_subgruposUpdateManyMutationInput, Prisma.padroes_subgruposUncheckedUpdateManyInput>
  /**
   * Filter which padroes_subgrupos to update
   */
  where?: Prisma.padroes_subgruposWhereInput
  /**
   * Limit how many padroes_subgrupos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * padroes_subgrupos upsert
 */
export type padroes_subgruposUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposInclude<ExtArgs> | null
  /**
   * The filter to search for the padroes_subgrupos to update in case it exists.
   */
  where: Prisma.padroes_subgruposWhereUniqueInput
  /**
   * In case the padroes_subgrupos found by the `where` argument doesn't exist, create a new padroes_subgrupos with this data.
   */
  create: Prisma.XOR<Prisma.padroes_subgruposCreateInput, Prisma.padroes_subgruposUncheckedCreateInput>
  /**
   * In case the padroes_subgrupos was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.padroes_subgruposUpdateInput, Prisma.padroes_subgruposUncheckedUpdateInput>
}

/**
 * padroes_subgrupos delete
 */
export type padroes_subgruposDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposInclude<ExtArgs> | null
  /**
   * Filter which padroes_subgrupos to delete.
   */
  where: Prisma.padroes_subgruposWhereUniqueInput
}

/**
 * padroes_subgrupos deleteMany
 */
export type padroes_subgruposDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which padroes_subgrupos to delete
   */
  where?: Prisma.padroes_subgruposWhereInput
  /**
   * Limit how many padroes_subgrupos to delete.
   */
  limit?: number
}

/**
 * padroes_subgrupos.modelos
 */
export type padroes_subgrupos$modelosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_modelos
   */
  select?: Prisma.padroes_modelosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_modelos
   */
  omit?: Prisma.padroes_modelosOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_modelosInclude<ExtArgs> | null
  where?: Prisma.padroes_modelosWhereInput
  orderBy?: Prisma.padroes_modelosOrderByWithRelationInput | Prisma.padroes_modelosOrderByWithRelationInput[]
  cursor?: Prisma.padroes_modelosWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Padroes_modelosScalarFieldEnum | Prisma.Padroes_modelosScalarFieldEnum[]
}

/**
 * padroes_subgrupos without action
 */
export type padroes_subgruposDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the padroes_subgrupos
   */
  select?: Prisma.padroes_subgruposSelect<ExtArgs> | null
  /**
   * Omit specific fields from the padroes_subgrupos
   */
  omit?: Prisma.padroes_subgruposOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.padroes_subgruposInclude<ExtArgs> | null
}
